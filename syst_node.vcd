$date
	Fri Feb 28 10:22:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test $end
$var wire 1 ! valid_o $end
$var wire 32 " re [31:0] $end
$var wire 32 # im [31:0] $end
$var reg 1 $ arstn $end
$var reg 1 % clk $end
$var reg 1 & enable $end
$var reg 3 ' valid_x [2:0] $end
$var reg 48 ( w_im [47:0] $end
$var reg 48 ) w_re [47:0] $end
$var reg 16 * x [15:0] $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 & enable $end
$var wire 3 + valid_x [2:0] $end
$var wire 48 , w_im [47:0] $end
$var wire 48 - w_re [47:0] $end
$var wire 16 . x [15:0] $end
$var wire 48 / x1 [47:0] $end
$var wire 3 0 valid_x1 [2:0] $end
$var wire 1 ! valid_o $end
$var wire 1 1 valid_im $end
$var wire 3 2 valid_generate1_re [2:0] $end
$var wire 3 3 valid_generate1_im [2:0] $end
$var wire 32 4 re [31:0] $end
$var wire 96 5 psumm_generate1_re [95:0] $end
$var wire 96 6 psumm_generate1_im [95:0] $end
$var wire 32 7 im [31:0] $end
$scope begin newgen[1] $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 8 en $end
$var wire 1 & enable $end
$var wire 32 9 psumm_i [31:0] $end
$var wire 1 : valid $end
$var wire 1 ; valid_psumm_i $end
$var wire 1 < valid_x_i $end
$var wire 1 = valid_x_o $end
$var wire 16 > weight_i [15:0] $end
$var wire 16 ? x_i [15:0] $end
$var wire 16 @ x_o [15:0] $end
$var wire 32 A weight_mult [31:0] $end
$var wire 32 B psumm_o [31:0] $end
$var reg 32 C psumm_reg [31:0] $end
$var reg 1 D valid_o $end
$upscope $end
$upscope $end
$scope begin newgen[2] $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 E en $end
$var wire 1 & enable $end
$var wire 32 F psumm_i [31:0] $end
$var wire 1 G valid $end
$var wire 1 H valid_psumm_i $end
$var wire 1 I valid_x_i $end
$var wire 1 J valid_x_o $end
$var wire 16 K weight_i [15:0] $end
$var wire 16 L x_i [15:0] $end
$var wire 16 M x_o [15:0] $end
$var wire 32 N weight_mult [31:0] $end
$var wire 32 O psumm_o [31:0] $end
$var reg 32 P psumm_reg [31:0] $end
$var reg 1 Q valid_o $end
$upscope $end
$upscope $end
$scope begin newgen1[1] $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 R en $end
$var wire 1 & enable $end
$var wire 32 S psumm_i [31:0] $end
$var wire 1 T valid $end
$var wire 1 U valid_psumm_i $end
$var wire 1 V valid_x_i $end
$var wire 1 W valid_x_o $end
$var wire 16 X weight_i [15:0] $end
$var wire 16 Y x_i [15:0] $end
$var wire 16 Z x_o [15:0] $end
$var wire 32 [ weight_mult [31:0] $end
$var wire 32 \ psumm_o [31:0] $end
$var reg 32 ] psumm_reg [31:0] $end
$var reg 1 ^ valid_o $end
$upscope $end
$upscope $end
$scope begin newgen1[2] $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 _ en $end
$var wire 1 & enable $end
$var wire 32 ` psumm_i [31:0] $end
$var wire 1 a valid $end
$var wire 1 b valid_psumm_i $end
$var wire 1 c valid_x_i $end
$var wire 1 d valid_x_o $end
$var wire 16 e weight_i [15:0] $end
$var wire 16 f x_i [15:0] $end
$var wire 16 g x_o [15:0] $end
$var wire 32 h weight_mult [31:0] $end
$var wire 32 i psumm_o [31:0] $end
$var reg 32 j psumm_reg [31:0] $end
$var reg 1 k valid_o $end
$upscope $end
$upscope $end
$scope module node $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 l en $end
$var wire 1 & enable $end
$var wire 32 m psumm_i [31:0] $end
$var wire 1 n valid $end
$var wire 1 o valid_psumm_i $end
$var wire 1 p valid_x_i $end
$var wire 1 q valid_x_o $end
$var wire 16 r weight_i [15:0] $end
$var wire 16 s x_i [15:0] $end
$var wire 16 t x_o [15:0] $end
$var wire 32 u weight_mult [31:0] $end
$var wire 32 v psumm_o [31:0] $end
$var reg 32 w psumm_reg [31:0] $end
$var reg 1 x valid_o $end
$upscope $end
$scope module node_gen $end
$var wire 1 $ arstn $end
$var wire 1 % clk $end
$var wire 1 y en $end
$var wire 1 & enable $end
$var wire 32 z psumm_i [31:0] $end
$var wire 1 { valid $end
$var wire 1 | valid_psumm_i $end
$var wire 1 } valid_x_i $end
$var wire 1 ~ valid_x_o $end
$var wire 16 !" weight_i [15:0] $end
$var wire 16 "" x_i [15:0] $end
$var wire 16 #" x_o [15:0] $end
$var wire 32 $" weight_mult [31:0] $end
$var wire 32 %" psumm_o [31:0] $end
$var reg 32 &" psumm_reg [31:0] $end
$var reg 1 '" valid_o $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0'"
bx &"
bx %"
bx $"
bx #"
bx ""
b1 !"
0~
0}
1|
0{
b0 z
0y
0x
bx w
bx v
bx u
bx t
bx s
b10 r
0q
0p
1o
0n
b0 m
0l
0k
bx j
bx i
bx h
bx g
bx f
b11 e
0d
0c
0b
0a
bx `
0_
0^
bx ]
bx \
bx [
bx Z
bx Y
b10 X
0W
0V
0U
0T
bx S
0R
0Q
bx P
bx O
bx N
bx M
bx L
b100 K
0J
0I
0H
0G
bx F
0E
0D
bx C
bx B
bx A
bx @
bx ?
b11 >
0=
0<
0;
0:
bx 9
08
bx 7
bx 6
bx 5
bx 4
b0 3
b0 2
01
b0 0
bx /
bx .
b10000000000000000110000000000000010 -
b1100000000000000100000000000000001 ,
b0 +
bx *
b10000000000000000110000000000000010 )
b1100000000000000100000000000000001 (
b0 '
1&
0%
0$
bx #
bx "
0!
$end
#10000
1%
#20000
0%
#30000
1y
1l
1{
1n
1~
1}
b1 0
1q
1p
b1 Z
b10 [
b1 Y
b1 g
b11 h
b1 f
b1 #"
b1 $"
b1 ""
b1 '
b1 +
b1 @
b11 A
b1 M
b100 N
b100000000000000010000000000000001 /
b1 t
b10 u
b1 *
b1 .
b1 ?
b1 L
b1 s
1%
#40000
0%
#50000
0y
0l
0{
1W
1V
0n
0~
0}
b10 9
b1 S
1=
1<
b10 0
0q
0p
b10 Z
b100 [
b10 Y
b10 g
b110 h
b10 f
b10 #"
b10 $"
b10 ""
bx00000000000000000000000000000010 5
b10 v
b10 w
bx00000000000000000000000000000001 6
b1 %"
b1 &"
1$
b10 '
b10 +
b10 @
b110 A
b10 M
b1000 N
b1000000000000000100000000000000010 /
b10 t
b100 u
b10 *
b10 .
b10 ?
b10 L
b10 s
1%
#60000
0%
#70000
0W
0V
1d
1c
0=
0<
b100 0
1J
1I
b11 Z
b110 [
b11 Y
b11 g
b1001 h
b11 f
b11 #"
b11 $"
b11 ""
b100 '
b100 +
b11 @
b1001 A
b11 M
b1100 N
b1100000000000000110000000000000011 /
b11 t
b110 u
b11 *
b11 .
b11 ?
b11 L
b11 s
1%
#80000
0%
#90000
1%
#100000
0%
#110000
1%
#120000
0%
#130000
1%
