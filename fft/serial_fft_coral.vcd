$date
	Fri Mar 28 20:50:24 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 32 ! x [31:0] $end
$var wire 1 " valid_o $end
$var wire 32 # re1 [31:0] $end
$var wire 64 $ re [63:0] $end
$var wire 32 % im1 [31:0] $end
$var wire 64 & im [63:0] $end
$var wire 1 ' finish $end
$var reg 1 ( arstn $end
$var reg 1 ) clk $end
$var reg 1 * valid_i $end
$var reg 16 + x1 [15:0] $end
$var reg 16 , x2 [15:0] $end
$scope module test $end
$var wire 1 ( arstn $end
$var wire 1 ) clk $end
$var wire 1 * valid_i $end
$var wire 32 - x [31:0] $end
$var wire 16 . w_re [15:0] $end
$var wire 16 / w_im [15:0] $end
$var wire 1 " valid_o $end
$var wire 64 0 re [63:0] $end
$var wire 64 1 im [63:0] $end
$var wire 1 ' finish $end
$var wire 2 2 counter [1:0] $end
$scope module core $end
$var wire 1 ) clk $end
$var wire 1 ' finish $end
$var wire 1 ( rstn $end
$var wire 1 * valid_i $end
$var wire 32 3 x [31:0] $end
$var wire 16 4 w_re [15:0] $end
$var wire 16 5 w_im [15:0] $end
$var wire 1 6 reset_node $end
$var wire 64 7 re [63:0] $end
$var wire 64 8 im [63:0] $end
$var wire 1 9 counter_enable $end
$var reg 2 : counter [1:0] $end
$var reg 1 " valid_o $end
$scope begin IM[0] $end
$var wire 32 ; psumm_i_im [31:0] $end
$var wire 1 < valid_psumm_i_im $end
$var wire 1 = valid_psumm_o_im $end
$var wire 32 > psumm_o_im [31:0] $end
$scope module im_node1 $end
$var wire 1 ) clk $end
$var wire 1 ? en $end
$var wire 1 * enable $end
$var wire 32 @ psumm_i [31:0] $end
$var wire 1 ( rstn $end
$var wire 1 A valid_o_logic $end
$var wire 1 < valid_psumm_i $end
$var wire 1 * valid_x_i $end
$var wire 1 B valid_x_o $end
$var wire 16 C x_i [15:0] $end
$var wire 16 D x_o [15:0] $end
$var wire 32 E weight_mult [31:0] $end
$var wire 16 F weight_i [15:0] $end
$var wire 32 G psumm_o_logic [31:0] $end
$var wire 32 H psumm_o [31:0] $end
$var reg 32 I psumm_reg [31:0] $end
$var reg 1 = valid_o $end
$upscope $end
$upscope $end
$scope begin IM[1] $end
$var wire 32 J psumm_i_im [31:0] $end
$var wire 1 K valid_psumm_i_im $end
$var wire 1 L valid_psumm_o_im $end
$var wire 32 M psumm_o_im [31:0] $end
$scope module im_node1 $end
$var wire 1 ) clk $end
$var wire 1 N en $end
$var wire 1 * enable $end
$var wire 32 O psumm_i [31:0] $end
$var wire 1 ( rstn $end
$var wire 1 P valid_o_logic $end
$var wire 1 K valid_psumm_i $end
$var wire 1 * valid_x_i $end
$var wire 1 Q valid_x_o $end
$var wire 16 R x_i [15:0] $end
$var wire 16 S x_o [15:0] $end
$var wire 32 T weight_mult [31:0] $end
$var wire 16 U weight_i [15:0] $end
$var wire 32 V psumm_o_logic [31:0] $end
$var wire 32 W psumm_o [31:0] $end
$var reg 32 X psumm_reg [31:0] $end
$var reg 1 L valid_o $end
$upscope $end
$upscope $end
$scope begin RE[0] $end
$var wire 32 Y psumm_i_re [31:0] $end
$var wire 1 Z valid_psumm_i_re $end
$var wire 1 [ valid_psumm_o_re $end
$var wire 32 \ psumm_o_re [31:0] $end
$scope module re_node1 $end
$var wire 1 ) clk $end
$var wire 1 ] en $end
$var wire 1 * enable $end
$var wire 32 ^ psumm_i [31:0] $end
$var wire 1 ( rstn $end
$var wire 1 _ valid_o_logic $end
$var wire 1 Z valid_psumm_i $end
$var wire 1 * valid_x_i $end
$var wire 1 ` valid_x_o $end
$var wire 16 a x_i [15:0] $end
$var wire 16 b x_o [15:0] $end
$var wire 32 c weight_mult [31:0] $end
$var wire 16 d weight_i [15:0] $end
$var wire 32 e psumm_o_logic [31:0] $end
$var wire 32 f psumm_o [31:0] $end
$var reg 32 g psumm_reg [31:0] $end
$var reg 1 [ valid_o $end
$upscope $end
$upscope $end
$scope begin RE[1] $end
$var wire 32 h psumm_i_re [31:0] $end
$var wire 1 i valid_psumm_i_re $end
$var wire 1 j valid_psumm_o_re $end
$var wire 32 k psumm_o_re [31:0] $end
$scope module re_node1 $end
$var wire 1 ) clk $end
$var wire 1 l en $end
$var wire 1 * enable $end
$var wire 32 m psumm_i [31:0] $end
$var wire 1 ( rstn $end
$var wire 1 n valid_o_logic $end
$var wire 1 i valid_psumm_i $end
$var wire 1 * valid_x_i $end
$var wire 1 o valid_x_o $end
$var wire 16 p x_i [15:0] $end
$var wire 16 q x_o [15:0] $end
$var wire 32 r weight_mult [31:0] $end
$var wire 16 s weight_i [15:0] $end
$var wire 32 t psumm_o_logic [31:0] $end
$var wire 32 u psumm_o [31:0] $end
$var reg 32 v psumm_reg [31:0] $end
$var reg 1 j valid_o $end
$upscope $end
$upscope $end
$upscope $end
$scope module ram1 $end
$var wire 2 w address [1:0] $end
$var wire 1 ) clk $end
$var wire 16 x data_in [15:0] $end
$var wire 16 y data_out [15:0] $end
$var wire 1 z write_enable $end
$upscope $end
$scope module ram2 $end
$var wire 2 { address [1:0] $end
$var wire 1 ) clk $end
$var wire 16 | data_in [15:0] $end
$var wire 16 } data_out [15:0] $end
$var wire 1 ~ write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
z~
bx }
bz |
bx {
zz
bx y
bz x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
0o
0n
bx m
0l
bx k
xj
1i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
0`
0_
bx ^
0]
bx \
x[
1Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
0Q
0P
bx O
0N
bx M
xL
1K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
0B
0A
bx @
0?
bx >
x=
1<
bx ;
bx :
x9
bx 8
bx 7
x6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
0*
0)
0(
0'
bx &
bx %
bx $
bx #
x"
bx !
$end
#10000
b0 J
b0 O
b0 ;
b0 @
b0 h
b0 m
b0 Y
b0 ^
0[
0j
0=
0L
0"
09
06
b10000000000 .
b10000000000 4
b10000000000 d
b10000000000 s
b10000000000 y
b0 /
b0 5
b0 F
b0 U
b0 }
b0 2
b0 :
b0 w
b0 {
1)
#20000
0)
#30000
1)
#40000
0)
#50000
1(
1)
#60000
0)
#70000
1)
#80000
0)
#90000
1?
1N
1]
1l
b10 q
b100000000000 t
b100000000000 r
b10 p
b10 S
b0 V
b0 T
b10 R
b1 b
b10000000000 e
b10000000000 c
b1 a
b1 D
b0 G
b0 E
b1 C
1A
1P
1_
1n
b10 ,
b100000000000000001 !
b100000000000000001 -
b100000000000000001 3
b1 +
1B
1Q
1`
1o
1*
1)
#100000
0)
#110000
b100000000000 h
b100000000000 m
b10000000000 Y
b10000000000 ^
b0 %
b10000000000 #
b100 q
b100 p
b100 S
b100 R
b11 b
b11 a
b11 D
b11 C
16
b1011111111000 t
b111111111000 r
b111111111010 e
b101111111010 c
b1111111110 .
b1111111110 4
b1111111110 d
b1111111110 s
b1111111110 y
b100011100 V
b100011100 T
b11010101 G
b11010101 E
b1000111 /
b1000111 5
b1000111 F
b1000111 U
b1000111 }
b1 2
b1 :
b1 w
b1 {
1L
b0 M
b0 W
b0 X
1=
b0 &
b0 1
b0 8
b0 >
b0 H
b0 I
1j
b100000000000 k
b100000000000 u
b100000000000 v
1[
b10000000000000000000000000000000010000000000 $
b10000000000000000000000000000000010000000000 0
b10000000000000000000000000000000010000000000 7
b10000000000 \
b10000000000 f
b10000000000 g
b100 ,
b1000000000000000011 !
b1000000000000000011 -
b1000000000000000011 3
b11 +
1)
#120000
0)
#130000
b110 q
b110 p
b110 S
b110 R
b101 b
b101 a
b101 D
b101 C
b111111111010 #
b111111111010 Y
b111111111010 ^
b1011111111000 h
b1011111111000 m
b11010101 %
b11010101 ;
b11010101 @
b100011100 J
b100011100 O
b110 ,
b1100000000000000101 !
b1100000000000000101 -
b1100000000000000101 3
b101 +
b111111111010 \
b111111111010 f
b111111111010 g
b101111111100000000000000000000000111111111010 $
b101111111100000000000000000000000111111111010 0
b101111111100000000000000000000000111111111010 7
b1011111111000 k
b1011111111000 u
b1011111111000 v
b11010101 >
b11010101 H
b11010101 I
b10001110000000000000000000000000011010101 &
b10001110000000000000000000000000011010101 1
b10001110000000000000000000000000011010101 8
b100011100 M
b100011100 W
b100011100 X
b10111110111100 t
b1011111000100 r
b10001111001000 e
b1001111001110 c
b1111110110 .
b1111110110 4
b1111110110 d
b1111110110 s
b1111110110 y
b10001110110 V
b1101011010 T
b1110100000 G
b1011001011 E
b10001111 /
b10001111 5
b10001111 F
b10001111 U
b10001111 }
b10 2
b10 :
b10 w
b10 {
1)
#140000
0)
#150000
1'
b10001110110 J
b10001110110 O
b1110100000 %
b1110100000 ;
b1110100000 @
b10111110111100 h
b10111110111100 m
b10001111001000 #
b10001111001000 Y
b10001111001000 ^
b1000 q
b1000 p
b1000 S
b1000 R
b111 b
b111 a
b111 D
b111 C
19
b100111100001100 t
b1111101010000 r
b11111100101110 e
b1101101100110 c
b1111101010 .
b1111101010 4
b1111101010 d
b1111101010 s
b1111101010 y
b101100011110 V
b11010101000 T
b100101110011 G
b10111010011 E
b11010101 /
b11010101 5
b11010101 F
b11010101 U
b11010101 }
b11 2
b11 :
b11 w
b11 {
b10001110110 M
b10001110110 W
b10001110110 X
b1000111011000000000000000000000001110100000 &
b1000111011000000000000000000000001110100000 1
b1000111011000000000000000000000001110100000 8
b1110100000 >
b1110100000 H
b1110100000 I
b10111110111100 k
b10111110111100 u
b10111110111100 v
b1011111011110000000000000000000010001111001000 $
b1011111011110000000000000000000010001111001000 0
b1011111011110000000000000000000010001111001000 7
b10001111001000 \
b10001111001000 f
b10001111001000 g
b1000 ,
b10000000000000000111 !
b10000000000000000111 -
b10000000000000000111 3
b111 +
1)
#160000
0)
#170000
0A
0?
0P
0N
0_
0]
0n
0l
b11111100101110 #
b100101110011 %
0'
b0 J
b0 O
b0 ;
b0 @
b0 h
b0 m
b0 Y
b0 ^
0B
0Q
0`
0o
0*
b11111100101110 \
b11111100101110 f
b11111100101110 g
b10011110000110000000000000000000011111100101110 $
b10011110000110000000000000000000011111100101110 0
b10011110000110000000000000000000011111100101110 7
b100111100001100 k
b100111100001100 u
b100111100001100 v
b100101110011 >
b100101110011 H
b100101110011 I
b10110001111000000000000000000000100101110011 &
b10110001111000000000000000000000100101110011 1
b10110001111000000000000000000000100101110011 8
b101100011110 M
b101100011110 W
b101100011110 X
1"
09
06
b10000000000000 t
b10000000000000 r
b1110000000000 e
b1110000000000 c
b10000000000 .
b10000000000 4
b10000000000 d
b10000000000 s
b10000000000 y
b0 V
b0 T
b0 G
b0 E
b0 /
b0 5
b0 F
b0 U
b0 }
b0 2
b0 :
b0 w
b0 {
1)
#180000
0)
#190000
0"
1)
#200000
0)
#210000
1)
#220000
0)
#230000
1)
#240000
0)
#250000
1)
#260000
0)
#270000
1)
